parameters:
    service: 'mintme'
    google_recaptcha_site_key: '%env(GOOGLE_RECAPTCHA_SITE_KEY)%'
    reg_google_recaptcha_site_key: '%env(REG_GOOGLE_RECAPTCHA_SITE_KEY)%'
    locale: 'en'
    sonata.media.admin.media.class: App\Admin\MediaAdmin
    router.request_context.scheme: 'https'
    router.request_context.host: '%mintme_url%'
    router.request_context.base_url: ''
    asset.request_context.base_path: '%router.request_context.base_url%'
    old_sound_rabbit_mq.consumer.class: 'App\RabbitMq\Consumer'
    container.dumper.inline_factories: true
    container.dumper.inline_class_loader: true

# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
imports:
    - { resource: parameters.yaml }

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    token.url_generator:
        class: App\TokenUrlGenerator
        decorates: 'router'
        arguments: ['@token.url_generator.inner']

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php,*/Model}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    coinmarketcap.rest_rpc:
        class: App\Communications\GuzzleRestWrapper
        arguments:
            $url: '%coinbase_api_url%'
            $timeoutSeconds: '%coinbase_api_timeout%'
            $headers:
                Accept: application/json

    rabbitmq.rest_rpc:
        class: App\Communications\GuzzleRestWrapper
        arguments:
            $url: '%env(RABBITMQ_MANAGMENT_URL)%'
            $timeoutSeconds: '10'
            $headers:
                Authorization: 'Basic Z3Vlc3Q6Z3Vlc3Q='

    disposable_email.json_rpc:
        class: App\Communications\GuzzleRestWrapper
        arguments:
            $url: '%origin_to_disposable_email_domains%'
            $timeoutSeconds: '%disposable_domains_timeout_seconds%'

    d7_networks.rest_rpc:
        class: App\Communications\GuzzleRestWrapper
        arguments:
            $url: '%env(D7_NETWORKS_URL)%'
            $timeoutSeconds: '10'
            $headers:
                Authorization: 'Bearer %env(D7_NETWORKS_API_TOKEN)%'

    clickatell.rest_api:
        class: App\Communications\GuzzleRestWrapper
        arguments:
            $url: '%env(CLICKATELL_NETWORKS_URL)%'
            $timeoutSeconds: '10'
            $headers:
                Authorization: '%env(CLICKATELL_NETWORKS_TOKEN)%'
                Accept: 'application/json'
                Content-Type: 'application/json'

    clickatell.rest_api_usa:
        class: App\Communications\GuzzleRestWrapper
        arguments:
            $url: '%env(CLICKATELL_NETWORKS_URL)%'
            $timeoutSeconds: '10'
            $headers:
                Authorization: '%env(CLICKATELL_NETWORKS_TOKEN_USA)%'
                Accept: 'application/json'
                Content-Type: 'application/json'

    viabtc.json_rpc:
        class: App\Communications\GuzzleWrapper
        arguments:
            $url: '%env(VIABTC_RPC)%'
            $timeoutSeconds: '%viabtc_response_timeout_seconds%'
            $auth: '%viabtc_auth%'

    viabtc.json_rpc_internal:
        class: App\Communications\GuzzleWrapper
        arguments:
            $url: '%env(VIABTC_RPC)%'
            $timeoutSeconds: '%viabtc_response_internal_timeout_seconds%'
            $auth: '%viabtc_auth%'

    internal_market_fetcher.json_rpc:
        class: App\Exchange\Market\MarketFetcher
        arguments:
            $jsonRpc: '@viabtc.json_rpc_internal'

    deposit.json_rpc:
        class: App\Communications\GuzzleWrapper
        arguments:
            $url: '%env(DEPOSIT_RPC)%'
            $timeoutSeconds: '%deposit_response_timeout_seconds%'

    withdraw.json_rpc:
        class: App\Communications\GuzzleWrapper
        arguments:
            $url: '%env(WITHDRAW_RPC)%'
            $timeoutSeconds: '%withdraw_response_timeout_seconds%'

    deploy.json_rpc:
        class: App\Communications\GuzzleWrapper
        arguments:
            $url: '%env(DEPLOY_RPC)%'
            $timeoutSeconds: '%deploy_response_timeout_seconds%'

    coinify.rest_rpc:
        class: App\Communications\GuzzleRestWrapper
        arguments:
            $url: '%coinify_api_url%'
            $timeoutSeconds: '%coinify_api_timeout%'

    security.authentication.listener.form:
        class: App\Security\Firewall\LoginFormAuthenticationListener
        parent: "security.authentication.listener.abstract"
        public: false
        abstract: true
        autowire: true
        autoconfigure: false
        arguments:
          $googleSecretKey: '%env(GOOGLE_RECAPTCHA_SECRET)%'

    App\Communications\CoinmarketcapCommunicator:
        arguments:
            $rpc: '@coinmarketcap.rest_rpc'

    App\Communications\RabbitMQCommunicator:
        arguments:
            $rpc: '@rabbitmq.rest_rpc'

    App\Communications\DeployCostFetcher:
        arguments:
            $rpc: '@coinmarketcap.rest_rpc'
            $cryptoIdsMapper: '@App\Communications\GeckoCoin\Config\GeckoCoinConfig'

    App\Communications\ConnectCostFetcher:
        arguments:
            $rpc: '@coinmarketcap.rest_rpc'
            $cryptoIdsMapper: '@App\Communications\GeckoCoin\Config\GeckoCoinConfig'

    App\Communications\MarketCostFetcher:
        arguments:
            $rpc: '@coinmarketcap.rest_rpc'
            $cryptoIdsMapper: '@App\Communications\GeckoCoin\Config\GeckoCoinConfig'

    app.jwt_service.coinify:
        class: App\Services\JwtService\JwtService
        arguments:
            $pemFile: '%coinify_pem_file%'
            $passPhrase: '%coinify_pem_passphrase%'

    App\Communications\CoinifyCommunicator:
        arguments:
            $rpc: '@coinify.rest_rpc'
            $jwtService: '@app.jwt_service.coinify'
            $partnerId: '%coinify_partner_id%'

    App\Communications\SMS\D7NetworksCommunicator:
        arguments:
            $rpc: '@d7_networks.rest_rpc'

    App\Communications\SMS\ClickAtellCommunicator:
        arguments:
            $guzzleRestWrapper: '@clickatell.rest_api'
            $guzzleRestWrapperUsa: '@clickatell.rest_api_usa'

    App\Wallet\Deposit\DepositGatewayCommunicator:
        arguments:
            $jsonRpc: '@deposit.json_rpc'

    App\Exchange\Trade\Config\LimitOrderConfig:
        arguments:
            $feeRates: '%order_fee_rates%'

    App\Exchange\Trade\Config\IgnoreRequestDelay:
        arguments:
            $ips: '%ignore_request_delay_ips%'

    App\Exchange\Trade\TraderFetcher:
        arguments:
            $jsonRpc: '@viabtc.json_rpc'

    App\Exchange\Market\MarketFetcher:
        arguments:
            $jsonRpc: '@viabtc.json_rpc'

    App\Wallet\Withdraw\Fetcher\Storage\WithdrawStorage:
        arguments:
            $jsonRpc: '@withdraw.json_rpc'
            $service: '%service%'

    App\Exchange\Balance\BalanceFetcher:
        arguments:
            $jsonRpc: '@viabtc.json_rpc'

    App\Exchange\Donation\DonationFetcher:
        arguments:
            $jsonRpc: '@viabtc.json_rpc'

    App\SmartContract\ContractHandler:
        $rpc: '@deploy.json_rpc'

    App\Communications\Factory\RpcClientFactoryInterface: '@App\Communications\Factory\GuzzleRpcClientFactory'

    App\Manager\TwoFactorManagerInterface:
        class: App\Manager\TwoFactorManager
        public: true

    App\Wallet\Withdraw\Communicator\AMQPCommunicator:
        arguments:
            $paymentProducer: '@old_sound_rabbit_mq.payment_producer'
            $paymentRetryProducer: '@old_sound_rabbit_mq.payment_retry_producer'
            $service: '%service%'

    App\Communications\AMQP\MarketProducer:
        arguments:
            $producer: '@old_sound_rabbit_mq.market_delayed_producer'

    FOS\UserBundle\Form\Factory\FormFactory:
        arguments:
            $formFactory: '@form.factory'
            $name: '%fos_user.profile.form.name%'
            $type: '%fos_user.profile.form.type%'
            $validationGroups: '%fos_user.profile.form.validation_groups%'

    App\Utils\Verify\WebsiteVerifier:
        arguments:
            $timeoutSeconds: '%verify_timeout_seconds%'
            $proxy: '%website_verify_proxy%'

    App\Command\UpdateTokenRelease:
        arguments:
            $logger: '@logger'
        tags:
            - { name: monolog.logger, channel: cron }

    App\Command\UpdatePendingWithdrawals:
        properties:
            withdrawExpirationTime: '%withdraw_expiration_time%'
            viabtcResponseTimeout: '%viabtc_response_timeout_seconds%'
        arguments:
            $logger: '@logger'
        tags:
            - { name: monolog.logger, channel: cron }

    App\Command\DeployNotificationBotCommand:
        arguments:
            $notificationsLimit: '%deploy_notifications_bot_limit%'
            $botsIds: '%deploy_notifications_bot_ids%'
            $logger: '@logger'
        tags:
            - { name: monolog.logger, channel: cron }

    App\Command\UpdateDisposableEmailDomains:
        arguments:
            $logger: '@logger'
        tags:
            - { name: monolog.logger, channel: cron }

    App\Command\CheckScheduledNotificationsCommand:
        arguments:
            $kbLinks: '%kb_links%'
            $filled_intervals: '%orders_filled_intervals%'
            $cancelled_intervals: '%orders_cancelled_intervals%'
            $token_marketing_tips_intervals: '%token_marketing_tips_intervals%'
            $token_promotion_intervals: '%token_promotion_intervals%'
            $marketing_airdrop_feature_intervals: '%marketing_airdrop_feature_intervals%'

    App\Command\Crypto\AddCryptoCommand:
        arguments:
            $parametersPath: '%parameters_path%'
            $assetsImgDir: '%assets_img_dir%'
            $publicDir: '%public_dir%'

    App\Command\SetParameterCommand:
        arguments:
            $parametersPath: '%parameters_path%'

    App\Security\Config\DisabledBlockchainConfig:
        arguments:
            $disabledCrypto: '%blockchain_disabled%'

    App\Security\Config\DisabledServicesConfig:
        arguments:
            $coinDepositDisabled: '%disable_coin_deposits%'
            $coinWithdrawDisabled: '%disable_coin_withdrawals%'
            $tokenDepositDisabled: '%disable_token_deposits%'
            $tokenWithdrawDisabled: '%disable_token_withdrawals%'
            $deployDisabled: '%disable_deploy_tokens%'
            $newTradesDisabled: '%disable_new_trades%'
            $tradingDisabled: '%disable_trading%'
            $allServicesDisabled: '%disable_all%'
            $blockchainDeployStatus: '%blockchain_deploy_status%'
            $depositsDisabled: '%disable_deposits%'
            $withdrawalsDisabled: '%disable_withdrawals%'
            $tradesDisabled: '%disable_coin_trades%'

    # SonataAdminBundle Registered Admin Classes
    # =======================================
    admin.user:
        class: App\Admin\UserAdmin
        arguments:
            - null
            - App\Entity\User
            - App\Controller\UserAdminCRUDController
        tags:
            - { name: sonata.admin, manager_type: orm, label: User }
        public: true
        calls:
            - [init, ['@fos_user.user_manager', '@App\Manager\ProfileManagerInterface']]

    admin.blacklist:
        class: App\Admin\BlacklistAdmin
        arguments:
            - null
            - App\Entity\Blacklist
            - Sonata\AdminBundle\Controller\CRUDController
        tags:
            - { name: sonata.admin, manager_type: orm, label: Blacklist }
        public: true

    admin.reciprocal.links:
        class: App\Admin\ReciprocalLinksAdmin
        arguments:
            - null
            - App\Entity\ReciprocalLinks
            - Sonata\AdminBundle\Controller\CRUDController
        tags:
            - { name: sonata.admin, manager_type: orm, label: Reciprocal Links }
        public: true

    admin.knowledgebase:
        class: App\Admin\KnowledgeBase\KnowledgeBaseAdmin
        arguments:
            - null
            - App\Entity\KnowledgeBase\KnowledgeBase
            - PixSortableBehaviorBundle:SortableAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, label: Knowledge Base }
        public: true
        properties:
            internalLinks: '%internalLinks%'

    admin.knowledgebase.category:
        class: App\Admin\KnowledgeBase\KnowledgeBaseCategoryAdmin
        arguments:
            - null
            - App\Entity\KnowledgeBase\Category
            - PixSortableBehaviorBundle:SortableAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, label: KB Categories }
        public: true

    admin.knowledgebase.subcategory:
        class: App\Admin\KnowledgeBase\KnowledgeBaseSubcategoryAdmin
        arguments:
            - null
            - App\Entity\KnowledgeBase\Subcategory
            - PixSortableBehaviorBundle:SortableAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, label: KB Subcategories }
        public: true

    admin.main.documents:
        class: App\Admin\MainDocumentsAdmin
        arguments:
            - null
            - App\Entity\MainDocument
            - Sonata\AdminBundle\Controller\CRUDController
        tags:
            - { name: sonata.admin, manager_type: orm, label: Main Documents }
        public: true

    tos_pp.translations:
        class: App\Admin\TosAndPPTranslationAdmin
        arguments:
            - null
            - App\Entity\Translation
            - PixSortableBehaviorBundle:SortableAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, label: ToS and PP }
        public: true
        properties:
            internalLinks: '%internalLinks%'

    # Required by rabbitmq bundle
    market_consumer:
        class: 'App\Consumers\MarketConsumer'
        arguments:
            $logger: '@logger'
        tags:
            - { name: monolog.logger, channel: rabbitmq }

    payment_consumer:
        class: 'App\Consumers\PaymentConsumer'
        arguments:
            $logger: '@logger'
        tags:
            - { name: monolog.logger, channel: rabbitmq }

    deposit_consumer:
        class: 'App\Consumers\DepositConsumer'
        arguments:
            $logger: '@logger'
        tags:
            - { name: monolog.logger, channel: rabbitmq }

    deploy_consumer:
        class: 'App\Consumers\DeployConsumer'
        arguments:
            $logger: '@logger'
            $coinbaseApiTimeout: '%coinbase_api_timeout%'
        tags:
            - { name: monolog.logger, channel: rabbitmq }

    contract_update_consumer:
        class: 'App\Consumers\ContractUpdateConsumer'
        arguments:
            $logger: '@logger'
        tags:
            - { name: monolog.logger, channel: rabbitmq }

    notifications_consumer:
        class: 'App\Consumers\NotificationsConsumer'
        arguments:
            $mailer: '@app.mailer'
            $logger: '@logger'
            $adminEmails: '%admin_emails%'
        tags:
            - { name: monolog.logger, channel: rabbitmq }

    App\Exchange\Trade\Trader:
        arguments:
            $logger: '@logger'
            $referralFee: '%referral_fee%'
        tags:
            - { name: monolog.logger, channel: exchange }

    balancer:
        class: 'App\Exchange\Balance\BalanceHandler'
        public: true
        arguments:
            $logger: '@logger'
        tags:
            - { name: monolog.logger, channel: exchange }

    App\Manager\UserManager:
        arguments:
            - "@fos_user.util.password_updater"
            - "@fos_user.util.canonical_fields_updater"
            - "@doctrine.orm.entity_manager"
            - "%fos_user.model.user.class%"
            - '%env(APP_SECRET)%'

    App\Manager\LinkedinManager:
        arguments:
          $linkedinClientId: '%env(LINKEDIN_CLIENT_ID)%'
          $linkedinClientSecret: '%env(LINKEDIN_CLIENT_SECRET)%'

    App\Manager\YoutubeManager:
        arguments:
          $youtubeClientId: '%env(YOUTUBE_CLIENT)%'
          $youtubeClientSecret: '%env(YOUTUBE_CLIENT_SECRET)%'
          $youtubeApiKey: '%env(YOUTUBE_API_KEY)%'

    App\Manager\TopHolderManager:
        arguments:
            $limit: '%top_holders%'

    App\Manager\ValidationCodeManager:
        arguments:
          $isEmailDisabled: "%disable_email%"

    App\Manager\HashtagManager:
        arguments:
          $cacheMaxAge: '%hashtags_cache_max_age%'
          $hashtagsPickInterval: '%hashtags_pick_interval%'

    App\Security\HackerVoter:
        arguments:
            $isHackerAllowed: "%is_hacker_allowed%"

    app.mailer:
        class: App\Mailer\Mailer
        arguments:
            $mail: '%env(MAILER_USER)%'
            $mailName: '%env(MAILER_NAME)%'
            $registrationTemplate: '%fos_user.registration.confirmation.template%'
            $resettingTemplate: '%fos_user.resetting.email.template%'

    App\Mailer\MailerInterface: "@app.mailer"

    App\Exchange\Balance\Factory\BalanceViewFactory:
        arguments:
            $tokenSubunit: "%token_precision%"

    App\Serializer\TradableNormalizer:
        arguments:
            $tokenSubunit: "%token_precision%"

    App\Controller\ResettingController:
        decorates: fos_user.resetting.controller
        public: true
        arguments:
            - '@event_dispatcher'
            - '@fos_user.resetting.form.factory'
            - '@fos_user.user_manager'
            - '@fos_user.util.token_generator'
            - '@fos_user.mailer'
            - '%fos_user.resetting.retry_ttl%'

    App\Controller\RegistrationController:
        decorates: fos_user.registration.controller
        public: true
        arguments:
            $eventDispatcher: '@event_dispatcher'
            $formFactory: '@fos_user.registration.form.factory'
            $userManager: '@fos_user.user_manager'
            $tokenStorage: '@security.token_storage'
            $mintmeHostFreeDays: '%freeDays%'
            $mintmeHostPrice: '%price%'
            $mintmeHostPath: '%mintmeHostPath%'

    App\Exchange\Config\Config:
        arguments:
            $offset: "%env(VIABTC_OFFSET)%"
            $marketConsumerEnabled: "%market_consumer_enabled%"

    App\Controller\API\WebSocketController:
        arguments:
            $isAuth: "%env(VIABTC_FORCE_WS_AUTH)%"

    App\EventSubscriber\KernelSubscriber:
        arguments:
            $isAuth: "%env(VIABTC_FORCE_WS_AUTH)%"

    App\EventSubscriber\LoginInfoSubscriber:
        tags:
            - { name: kernel.event_subscriber }

    App\EventListener\BruteForceListener:
        arguments:
            $session: '@session'
            $secret: '%env(APP_SECRET)%'
            $translator: '@App\Services\TranslatorService\TranslatorInterface'
        tags:
            - { name: kernel.event_listener, event: scheb_two_factor.authentication.attempt }
            - { name: kernel.event_listener, event: scheb_two_factor.authentication.failure }
            - { name: kernel.event_listener, event: scheb_two_factor.authentication.success }

    App\EventListener\RegistrationInitializedListener:
        tags:
            - { name: kernel.event_listener, event: fos_user.registration.initialize }

    App\EventListener\RegistrationCompletedListener:
        tags:
            - { name: kernel.event_listener, event: fos_user.registration.completed }

    App\EventListener\DoctrineListener:
        arguments:
            $ignoredColumns:
                - 'rank_id'
                - 'error'
            $ignoredKeys:
                - 'FK_5F37A13B7616678F'
                - 'UNIQ_5F37A13B7616678F'
        tags:
            - { name: doctrine.event_listener, event: onSchemaAlterTable }
            - { name: doctrine.event_listener, event: onSchemaAlterTableChangeColumn }

    App\EventListener\SwitchUserSubscriber:
        arguments:
            $logger: '@App\Logger\UserActionLogger'

    FOS\UserBundle\Mailer\MailerInterface: '@app.mailer'

    App\Logger\UserActionProcessor:
        autowire: true
        tags:
            - { name: monolog.processor, channel: user_action }

    monolog.formatter.user_action:
        class: Monolog\Formatter\LineFormatter
        arguments:
            - "%%datetime%%|%%level_name%%|%%extra.ip_address%%|%%extra.username%%|%%message%%|%%context%%\n"
            - "Y-m-d H:i:s"

    App\Logger\UserActionLogger:
        autowire: true
        tags:
            - { name: monolog.logger, channel: user_action }

    App\Logger\FrontEndProcessor:
        autowire: true
        tags:
            - { name: monolog.processor, channel: front_end }

    monolog.formatter.front_end:
        class: Monolog\Formatter\LineFormatter
        arguments:
            - "%%datetime%%|%%level_name%%|%%extra.ip_address%%|%%extra.username%%|%%extra.url%%|%%message%%|%%context%%\n"
            - "Y-m-d H:i:s"

    App\Logger\FrontEndLogger:
        autowire: true
        tags:
            - { name: monolog.logger, channel: front_end }

    App\EntityListener\ImageListener:
        tags:
            - { name: doctrine.orm.entity_listener, entity: App\Entity\Image, event: postLoad, lazy: true }
            - { name: doctrine.orm.entity_listener, entity: App\Entity\Image, event: postPersist, lazy: true }
            - { name: doctrine.orm.entity_listener, entity: App\Entity\Image, event: preRemove, lazy: true }

    App\EntityListener\UserListener:
        tags:
            - { name: doctrine.orm.entity_listener, entity: App\Entity\User, event: preUpdate, lazy: true }
            - { name: doctrine.orm.entity_listener, entity: App\Entity\User, event: postUpdate, lazy: true }

    logout_listener:
        class: App\EventListener\LogoutListener
        tags:
            - { name: kernel.event_listener, event: kernel.exception, method: onKernelException }

    App\EventListener\ChangePasswordListener:
        tags:
            - { name: kernel.event_listener, event: fos_user.change_password.edit.completed }

    app.form.change_password:
        class: App\Form\ChangePasswordType
        tags:
            - { name: form.type, alias: app_user_change_password }

    app.form.resetting:
        class: App\Form\ResettingType
        tags:
            - { name: form.type, alias: app_user_resetting }

    app.recaptcha.form.type:
        class: App\Form\Type\RegisterRecaptchaType
        public: true
        arguments:
            - '%env(REG_GOOGLE_RECAPTCHA_SITE_KEY)%'
            - '%ewz_recaptcha.enabled%'
            - '%ewz_recaptcha.ajax%'
            - '@ewz_recaptcha.locale.resolver'
            - '%ewz_recaptcha.api_host%'
        tags:
            - { name: form.type }

    app_recaptcha.validator.true:
        class: EWZ\Bundle\RecaptchaBundle\Validator\Constraints\IsTrueValidator
        public: true
        arguments:
            - '%ewz_recaptcha.enabled%'
            - '%env(REG_GOOGLE_RECAPTCHA_SECRET)%'
            - '@request_stack'
            - '%ewz_recaptcha.http_proxy%'
            - '%ewz_recaptcha.verify_host%'
            - '@?security.authorization_checker'
            - '%ewz_recaptcha.trusted_roles%'
            - '%ewz_recaptcha.api_host%'
            - '%ewz_recaptcha.timeout%'
        tags:
            - { name: validator.constraint_validator, alias: 'app_recaptcha.true' }

    App\EventSubscriber\SitemapSubscriber:
        arguments:
            - "@router"
        tags:
            - { name: "kernel.event_subscriber", priority: 100 }

    App\Controller\API\TokensController:
        arguments:
            $session: '@session'
            $topHolders: "%top_holders%"
            $expirationTime: "%token_deletion_confirm_code_expiration_time%"

    two_factor.auth_require_handler:
        class: App\Security\TwoFactorRequireHandler
        public: true

    App\EventSubscriber\LocaleSubscriber:
        arguments:
            $defaultLocale: '%locale%'
            $transLocales: '%translation_locales%'
            $transAuto: '%translation_auto_detect%'

    App\Communications\DisposableEmailCommunicator:
        arguments:
            $rpc: '@disposable_email.json_rpc'
            $fileNameIndex: "%name_of_files_for_disposable_domains_index%"
            $fileNameWildcard: "%name_of_files_for_disposable_domains_wildcard%"

    App\Utils\Converter\FriendlyUrlConverterInterface: '@App\Utils\Converter\FriendlyUrlConverter'

    # Media providers
    app.media.provider.document:
        class: App\Media\Provider\DocumentProvider
        tags:
            - { name: sonata.media.provider }
        arguments:
            - app.media.provider.document
            - '@sonata.media.generator.default'
            - '@sonata.media.thumbnail.format'
            - '%docs_path%'
            - '@App\Utils\Converter\FriendlyUrlConverterInterface'
            - ['pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx']
            - ['application/pdf', 'application/x-pdf', 'application/rtf', 'text/html', 'text/rtf', 'text/plain', 'application/excel', 'application/msword', 'application/vnd.ms-excel', 'application/vnd.ms-powerpoint', 'application/vnd.ms-powerpoint', 'application/vnd.oasis.opendocument.text', 'application/vnd.oasis.opendocument.graphics', 'application/vnd.oasis.opendocument.presentation', 'application/vnd.oasis.opendocument.spreadsheet', 'application/vnd.oasis.opendocument.chart', 'application/vnd.oasis.opendocument.formula', 'application/vnd.oasis.opendocument.database', 'application/vnd.oasis.opendocument.image', 'text/comma-separated-values', 'text/xml', 'application/xml', 'application/zip']
            - '@sonata.media.metadata.proxy'
        calls:
            - [ setTemplates, [ { helper_thumbnail: SonataMediaBundle:Provider:thumbnail.html.twig, helper_view: SonataMediaBundle:Provider:view_file.html.twig } ] ]

    App\Exchange\Market\MarketCapCalculator:
        arguments:
            $supplyLinks: { Webchain: '%mintme_supply%' }
            $tokenSupply: "%token_quantity%"
            $rpc: '@coinmarketcap.rest_rpc'
            $minimumVolumeForMarketcap: '%minimum_volume_for_marketcap%'

    app.profile.form:
        class: App\Form\ProfileType
        arguments:
            $showFullDataInProfile: '%show_full_data_in_profile%'

    App\EventSubscriber\TransactionSubscriber:
        arguments:
            $mailer: '@app.mailer'

    App\EventSubscriber\DeploySubscriber:
        arguments:
            $mailer: '@app.mailer'

    App\Communications\CryptoRatesFetcher:
        arguments:
            $rpc: '@coinmarketcap.rest_rpc'
            $cryptoIdsMapper: '@App\Communications\GeckoCoin\Config\GeckoCoinConfig'

    App\Communications\ObservableCryptoRatesFetcher:
        arguments:
            $cryptoRatesFetcher: '@App\Communications\CryptoRatesFetcher'

    App\Communications\CachedCryptoRatesFetcher:
        arguments:
            $cryptoRatesFetcher: '@App\Communications\ObservableCryptoRatesFetcher'

    App\Communications\CryptoRatesFetcherInterface: '@App\Communications\CachedCryptoRatesFetcher'

    App\Manager\ImageManagerInterface: '@App\Manager\ImageManager'

    app.emailCanonicalizer:
        class: App\Canonicalizer\EmailCanonicalizer
        public: false

    App\Controller\HackerController:
        arguments:
            $quickRegistrationPassword: '%quick_registration_password%'

    App\Controller\API\UsersController:
        arguments:
            $clientManager: '@fos_oauth_server.client_manager.default'
            $session: '@session'

    App\Security\ApiKeyAuthenticator:
        arguments:
            $oAuthStorage: '@fos_oauth_server.storage.default'

    App\EventSubscriber\AuthenticationListener:
        arguments:
            $firewallName: '%fos_user.firewall_name%'

    App\Utils\ServiceInfo\ServiceInfoBuilder:
        arguments:
            $serviceContainerIp: '%env(SERVICE_CONTAINER_IP)%'
            $gatewayWorkDir: '%env(GATEWAY_WORKDIR)%'
            $isTestingServer: '%env(bool:TESTING_SERVER_ENV)%'

    App\Exchange\Config\AirdropConfig:
        arguments:
            $airdropParams: '%airdrop_params%'

    App\Exchange\Config\TokenSignupBonusConfig:
        arguments:
            $tokenSignupBonusParams: '%token_signup_bonus_params%'

    App\EventListener\NoCacheListener:
        tags:
            - { name: 'kernel.event_listener', event: 'kernel.response' }

    App\Security\PathRoles:
        arguments:
            $accessMap: '@security.access_map'

    App\Form\DataTransformer\MoneyTransformer:
        shared: false

    App\Repository\PendingWithdrawRepository:
        arguments:
            $expirationTime: '%withdraw_expiration_time%'

    App\Repository\PendingTokenWithdrawRepository:
        arguments:
            $expirationTime: '%withdraw_expiration_time%'

    App\Exchange\Config\QuickTradeConfig:
        arguments:
            $params: '%quick_trade%'
            $minAmounts: '%quick_trade_min_amounts%'

    App\Logger\DonationProcessor:
        autowire: true
        tags:
            - { name: monolog.processor, channel: donation }

    monolog.formatter.donation:
        class: Monolog\Formatter\LineFormatter
        arguments:
            - "%%datetime%%|%%level_name%%|%%extra.ip_address%%|%%extra.username%%|%%message%%|%%context%%\n"
            - "Y-m-d H:i:s"

    monolog.formatter.withdraw:
        class: Monolog\Formatter\LineFormatter
        arguments:
            - "%%datetime%%|%%level_name%%|%%message%%|%%context%%\n"
            - "Y-m-d H:i:s"

    App\Logger\DonationLogger:
        autowire: true
        tags:
            - { name: monolog.logger, channel: donation }

    App\Logger\WithdrawLogger:
        autowire: true
        tags:
            - { name: monolog.logger, channel: withdraw }

    old_sound_rabbit_mq.consumer_command:
        class: App\Command\ConsumerCommand

    App\Manager\MarketStatusManager:
        properties:
            minVolumeForMarketcap: '%minimum_volume_for_marketcap%'

    monolog.formatter.unsubscribe:
        class: Monolog\Formatter\LineFormatter
        arguments:
            - "%%message%%\n"

    App\Exchange\Config\DeployCostConfig:
        arguments:
            $deployCosts: '%deploy_costs%'
            $deployFees: '%deploy_fees%'
            $deployReferralRewards: '%deploy_referral_rewards%'

    App\Exchange\Config\ConnectCostConfig:
        arguments:
            $connectCosts: '%connect_costs%'
            $connectFees: '%connect_fees%'

    App\Exchange\Config\TokenMarketConfig:
        arguments:
            $costs: '%market_costs%'

    App\Exchange\Config\MarketPairsConfig:
        arguments:
            $enabledMarkets: '%market_pairs%'
            $enabledTopListMarkets: '%market_pairs_top_list%'

    gedmo.listener.sortable:
        class: Gedmo\Sortable\SortableListener
        calls:
            - [setAnnotationReader, ['@annotation_reader']]
        tags:
            - { name: doctrine.event_subscriber, connection: default }

    App\Manager\ScheduledNotificationManager:
        properties:
            filled_intervals: '%orders_filled_intervals%'
            cancelled_intervals: '%orders_cancelled_intervals%'
            token_marketing_tips_intervals: '%token_marketing_tips_intervals%'
            token_promotion_intervals: '%token_promotion_intervals%'
            marketing_airdrop_feature_intervals: '%marketing_airdrop_feature_intervals%'

    App\Controller\API\WalletController:
        arguments:
            $coinifySharedSecret: '%env(COINIFY_SHARED_SECRET)%'
            $session: '@session'

    Abraham\TwitterOAuth\TwitterOAuth:
        arguments:
            $consumerKey: '%env(TWITTER_API_KEY)%'
            $consumerSecret: '%env(TWITTER_API_SECRET)%'

    App\Command\SendCustomMailCommand:
        arguments:
            $mintmeHostFreeDays: '%freeDays%'
            $mintmeHostPrice: '%price%'
            $mintmeHostPath: '%mintmeHostPath%'

    App\Utils\ValidatorFactory:
        properties:
            minimalPriceOrder: '%minimum_order_value_usd%'
            fallbackMinCryptoAmount: '%minimum_order_value_fallback%'

    App\TwigExtension\SafeHtmlExtension:
        arguments:
            $cachePath: '%kernel.cache_dir%'
            $internalLinks: '%internalLinks%'

    App\TwigExtension\GeneratorUrlExtension:
        arguments:
            - '@token.url_generator'

    App\SmartContract\Config\ExplorerUrlsConfig:
        arguments:
            $explorerUrls: '%explorer_urls%'

    RestCord\DiscordClient:
        arguments:
            $options: {
                token: '%env(DISCORD_BOT_TOKEN)%'
            }

    App\Manager\DiscordManager:
        arguments:
            $discordForLeaveGuild: '@discord.client.for.leave_guild'
            $publicKey: '%env(DISCORD_PUBLIC_KEY)%'
            $clientId: '%env(DISCORD_CLIENT_ID)%'

    discord.oauth.client:
        class: App\Communications\GuzzleRestWrapper
        arguments:
            $url: '%discord_base_auth_url%'
            $timeoutSeconds: '%discord_api_timeout%'
            $headers:
                Content-Type: application/x-www-form-urlencoded

    App\Communications\DiscordOAuthClient:
        arguments:
            $guzzleRestWrapper: '@discord.oauth.client'
            $clientId: '%env(DISCORD_CLIENT_ID)%'
            $baseAuthUrl: '%discord_base_auth_url%'
            $clientSecret: '%env(DISCORD_CLIENT_SECRET)%'

    discord.client.for.leave_guild:
        class: RestCord\DiscordClient
        arguments:
            $options: {
                token: '%env(DISCORD_BOT_TOKEN)%',
                guzzleOptions: {
                    headers: {
                        Authorization: 'Bot %env(DISCORD_BOT_TOKEN)%'
                    }
                }
            }

    discord.command.client:
        class: App\Communications\GuzzleRestWrapper
        arguments:
            $url: '%discord_base_commands_url%'
            $timeoutSeconds: '10'
            $headers:
                Content-Type: application/json
                Authorization: 'Bot %env(DISCORD_BOT_TOKEN)%'

    App\Command\CreateDiscordCommand:
        arguments:
            $clientId: '%env(DISCORD_CLIENT_ID)%'
            $guzzleRestWrapper: '@discord.command.client'

    App\Config\VotingConfig:
        arguments:
            $votingConfig: '%voting%'

    App\Config\RewardsConfig:
        arguments:
            $rewardsConfig: '%rewards_bounties%'

    App\Config\PostsConfig:
        arguments:
            $postCommentsTipConfig: '%post_comments_tip%'

    App\Communications\SMS\Config\SmsConfig:
        arguments:
            $smsConfig: '%sms_providers%'
            $disableSms: '%disable_sms%'

    App\Config\FailedLoginConfig:
        arguments:
            $failedLoginConfig: '%failed_login%'

    App\Config\CryptoConfig:
        arguments:
            $defaultNetworks: '%crypto_default_network%'

    App\Config\TokenPromotionConfig:
        arguments:
            $tariffs: '%token_promotion_tariffs%'

    App\Command\CheckTranslationFile:
        public: true
        arguments:
            - '%locale%'
        tags:
            - { name: console.command, command: translation:check }

    App\EventListener\SecurityInteractiveLoginListener:
        tags:
            - { name: kernel.event_listener, event: security.interactive_login }

    App\EventListener\KernelRequestListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request, priority: 0 }

    App\EventListener\LoginListener:
        arguments:
            $userManager: '@fos_user.user_manager'
            $requestStack: '@request_stack'
        tags:
            - { name: kernel.event_listener, event: security.authentication.failure, method: onAuthenticationFailure }

    App\Config\ValidationCodeConfigs:
        arguments:
            $validationCodeConfigs: '%phone_codes%'

    App\Config\EmailValidationCodeConfigs:
        arguments:
            $validationCodeConfigs: '%email_change_codes%'

    App\Config\TFABackupCodesConfigs:
        arguments:
            $validationCodeConfigs: '%2fa_backup_codes%'

    App\Config\UserLimitsConfig:
        arguments:
            $userLimit: '%user_limit%'

    App\Config\PhoneNumberConfig:
        arguments:
            $editPhoneConfig: '%edit_phone%'

    App\Config\TradingConfig:
        arguments:
            $tradingConfig: '%tokens_market_pagination%'

    App\Config\BlacklistIpConfig:
        arguments:
            $blacklistIpConfig: '%failed_login%'

    App\Config\HideFeaturesConfig:
        arguments:
            $newMarketsEnabled: '%feature_create_new_markets_enabled%'
            $tokenConnectEnabled: '%feature_token_connect_enabled%'
            $rewardsEnabled: '%feature_rewards_enabled%'
            $enabledCryptos: '%enabled_cryptos%'

    App\Config\LimitHistoryConfig:
        arguments:
            $limitMonths: '%limit_history_months%'

    App\Config\MinWithdrawalConfig:
        arguments:
            $minWithdrawals: '%min_coin_withdrawal%'

    gecko_coin.rest_api:
        class: App\Communications\GuzzleRestWrapper
        arguments:
            $url: '%coinbase_api_url%'
            $timeoutSeconds: '%coinbase_api_timeout%'

    App\Communications\GeckoCoin\GeckoCoinCommunicator:
        arguments:
            $guzzleRestWrapper: '@gecko_coin.rest_api'

    App\Communications\GeckoCoin\Config\GeckoCoinConfig:
        arguments:
            $geckoCoinMethodConfig: '%coinbase_api_methods%'
            $cryptosConfig: '%coinbase_cryptos%'

    app.entity_subscriber:
        class: App\EventSubscriber\EntitySubscriber
        tags:
            - { name: doctrine.event_subscriber, connection: default }

    App\EventSubscriber\EntitySubscriber:
        arguments:
            $session: '@session'

    App\Services\BackendService\BackendContainerBuilder:
        properties:
            createServiceScript: '%env(CREATE_SERVICE_SCRIPT)%'
            deleteServiceScript: '%env(DELETE_SERVICE_SCRIPT)%'

    app.profanity_censor:
        class: Snipe\BanBuilder\CensorWords

    App\Validator\Constraints\NoBadWordsValidator:
        arguments:
            $censor: '@app.profanity_censor'
            $languages: ['en-base', 'en-uk','en-us', 'es', 'fr']
            $fullWords: true

    App\Controller\API\DiscordController:
        arguments:
            $session: '@session'

    App\Controller\API\MediaController:
        arguments:
            $session: '@session'

    App\Controller\API\MessageController:
        arguments:
            $session: '@session'

    App\Controller\API\OrdersController:
        arguments:
            $session: '@session'

    App\Controller\API\PostsController:
        arguments:
            $session: '@session'

    App\Controller\API\ProfileController:
        arguments:
            $session: '@session'

    App\Controller\API\RewardController:
        arguments:
            $session: '@session'

    App\Controller\API\QuickTradeController:
        arguments:
            $session: '@session'

    App\Controller\API\ChatController:
        arguments:
            $session: '@session'

    App\Controller\API\TwitterController:
        arguments:
            $session: '@session'

    App\Controller\API\UserNotificationsController:
        arguments:
            $session: '@session'

    App\Controller\API\VotingController:
        arguments:
            $session: '@session'

    App\Controller\TokenController:
        arguments:
            $session: '@session'

    App\Controller\UserController:
        arguments:
            $session: '@session'

    App\Controller\WalletController:
        arguments:
            $session: '@session'

    App\Controller\News\PostArchiveAction:
        arguments:
            $perPage: '%news_per_page%'

    App\Config\PanelEnvConfig:
        arguments:
            $panelEnvironment: '%panel_environment%'

    App\Services\TranslatorService\Translator:
        parent: 'translator.default'
        autowire: true
        autoconfigure: false
        public: true

    App\Command\CreateBlockchainTokenCommand:
        arguments:
            $tokenCreateLimit: '%token_create_limit%'

    App\Mercure\JwtProvider:
        arguments:
            $publish: '%mercure_default_publish_topics%'
            $subscribe: '%mercure_default_subscribe_topics%'

    App\Mercure\Authorization:
        arguments:
            $publish: '%mercure_public_publish_topics%'
            $subscribe: '%mercure_public_subscribe_topics%'

    Symfony\Component\Mercure\Jwt\TokenFactoryInterface:
        alias: mercure.hub.public.jwt.factory

    App\Config\WithdrawalDelaysConfig:
        arguments:
            $withdrawAfterLoginTime: '%withdraw_after_login_seconds%'
            $withdrawAfterRegisterTime: '%withdraw_after_register_seconds%'
            $withdrawalDelay: '%withdrawal_delay%'
            $orderDelay: '%order_delay%'
            $withdrawAfterUserChangeTime: '%withdraw_after_user_changes_seconds%'

    App\Manager\Profit\BotsProfitsFetcher:
        arguments:
            $trackedAccountsEmails: '%tracked_accounts_emails%'
    App\Manager\Profit\TradingProfitsFetcher:
        arguments:
            $marketFetcher: '@internal_market_fetcher.json_rpc'

    App\EventListener\SessionResetListener:
        arguments:
            $session: '@session'
            $sessionLifetime: '%session_cookie_lifetime_seconds%'
        tags:
            - { name: 'kernel.event_listener' }

    App\Command\TradeInactiveAccountsAssets:
        arguments:
            $period: '%inactive_account_assets_period%'
            $tradePercentage: '%min_inactive_account_trade%'
            $tradeUsdLimit: '%min_inactive_account_trade_usd%'
            $minOrderUsd: '%minimum_order_value_usd%'
            $logger: '@logger'
        tags:
            - { name: monolog.logger, channel: cron }

    App\Utils\Converter\NetworkSymbolConverter:
        arguments:
            $conversionMap: '%conversion_map%'

    App\Exchange\Donation\DonationHandler:
        arguments:
            $referralFee: '%referral_fee%'

parameters:
    service: 'mintme'
    google_recaptcha_site_key: '%env(GOOGLE_RECAPTCHA_SITE_KEY)%'
    locale: 'en'
    sonata.media.admin.media.class: App\Admin\MediaAdmin
    router.request_context.host: '%mintme_url%'
    router.request_context.base_url: ''
    asset.request_context.base_path: '%router.request_context.base_url%'
    old_sound_rabbit_mq.consumer.class: 'App\RabbitMq\Consumer'

# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
imports:
    - { resource: parameters.yaml }

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php,*/Model}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    coinmarketcap.rest_rpc:
        class: App\Communications\GuzzleRestWrapper
        arguments:
            $url: '%coinbase_api_url%'
            $timeoutSeconds: '%coinbase_api_timeout%'
            $headers:
                Accept: application/json

    rabbitmq.rest_rpc:
        class: App\Communications\GuzzleRestWrapper
        arguments:
            $url: '%env(RABBITMQ_MANAGMENT_URL)%'
            $timeoutSeconds: '10'
            $headers:
                Authorization: 'Basic Z3Vlc3Q6Z3Vlc3Q='

    disposable_email.json_rpc:
        class: App\Communications\GuzzleRestWrapper
        arguments:
            $url: '%origin_to_disposable_email_domains%'
            $timeoutSeconds: '%disposable_domains_timeout_seconds%'

    viabtc.json_rpc:
        class: App\Communications\GuzzleWrapper
        arguments:
            $url: '%env(VIABTC_RPC)%'
            $timeoutSeconds: '%viabtc_response_timeout_seconds%'
            $auth: '%viabtc_auth%'

    deposit.json_rpc:
        class: App\Communications\GuzzleWrapper
        arguments:
            $url: '%env(DEPOSIT_RPC)%'
            $timeoutSeconds: '%deposit_response_timeout_seconds%'
            $auth: '%deposit_auth%'

    withdraw.json_rpc:
        class: App\Communications\GuzzleWrapper
        arguments:
            $url: '%env(WITHDRAW_RPC)%'
            $timeoutSeconds: '%withdraw_response_timeout_seconds%'
            $auth: '%withdraw_auth%'

    deploy.json_rpc:
        class: App\Communications\GuzzleWrapper
        arguments:
            $url: '%deploy_rpc%'
            $timeoutSeconds: '%deploy_response_timeout_seconds%'

    App\Communications\CoinmarketcapCommunicator:
        arguments:
            $rpc: '@coinmarketcap.rest_rpc'

    App\Communications\RabbitMQCommunicator:
        arguments:
            $rpc: '@rabbitmq.rest_rpc'

    App\Communications\DeployCostFetcher:
        arguments:
            $rpc: '@coinmarketcap.rest_rpc'
            $usdCost: '%deploy_cost%'

    App\Wallet\Deposit\DepositGatewayCommunicator:
        arguments:
            $jsonRpc: '@deposit.json_rpc'

    App\Exchange\Trade\Config\LimitOrderConfig:
        arguments:
            $takerFeeRate: '%taker_fee_rate%'
            $makerFeeRate: '%maker_fee_rate%'

    App\Exchange\Trade\TraderFetcher:
        arguments:
            $jsonRpc: '@viabtc.json_rpc'

    App\Exchange\Market\MarketFetcher:
        arguments:
            $jsonRpc: '@viabtc.json_rpc'

    App\Wallet\Withdraw\Fetcher\Storage\WithdrawStorage:
        arguments:
            $jsonRpc: '@withdraw.json_rpc'
            $service: '%service%'

    App\Exchange\Balance\BalanceFetcher:
        arguments:
            $jsonRpc: '@viabtc.json_rpc'

    App\Exchange\Donation\DonationFetcher:
        arguments:
            $jsonRpc: '@viabtc.json_rpc'

    App\SmartContract\ContractHandler:
        $rpc: '@deploy.json_rpc'

    App\Communications\Factory\RpcClientFactoryInterface: '@App\Communications\Factory\GuzzleRpcClientFactory'

    App\Manager\TwoFactorManagerInterface:
        class: App\Manager\TwoFactorManager
        public: true

    App\Wallet\Withdraw\Communicator\AMQPCommunicator:
        arguments:
            $paymentProducer: '@old_sound_rabbit_mq.payment_producer'
            $paymentRetryProducer: '@old_sound_rabbit_mq.payment_retry_producer'
            $service: '%service%'

    App\Communications\AMQP\MarketProducer:
        arguments:
            $producer: '@old_sound_rabbit_mq.market_delayed_producer'

    FOS\UserBundle\Form\Factory\FormFactory:
        arguments:
            $formFactory: '@form.factory'
            $name: '%fos_user.profile.form.name%'
            $type: '%fos_user.profile.form.type%'
            $validationGroups: '%fos_user.profile.form.validation_groups%'

    App\Utils\Verify\WebsiteVerifier:
        arguments:
            $timeoutSeconds: '%verify_timeout_seconds%'
            $proxy: '%website_verify_proxy%'

    App\Command\UpdateTokenRelease:
        arguments:
            $logger: '@logger'
        tags:
            - { name: monolog.logger, channel: cron }

    App\Command\UpdatePendingWithdrawals:
        properties:
            expirationTime: '%withdraw_expiration_time%'
        arguments:
            $logger: '@logger'
        tags:
            - { name: monolog.logger, channel: cron }

    App\Command\UpdateDisposableEmailDomains:
        arguments:
            $logger: '@logger'
        tags:
            - { name: monolog.logger, channel: cron }

    # SonataAdminBundle Registered Admin Classes
    # =======================================
    admin.user:
        class: App\Admin\UserAdmin
        arguments:
            - null
            - App\Entity\User
            - App\Controller\UserAdminCRUDController
        tags:
            - { name: sonata.admin, manager_type: orm, label: User }
        public: true
        calls:
             - [init, ['@fos_user.user_manager', '@App\Manager\ProfileManagerInterface']]

    admin.blacklist:
        class: App\Admin\BlacklistAdmin
        arguments:
            - null
            - App\Entity\Blacklist
            - Sonata\AdminBundle\Controller\CRUDController
        tags:
            - { name: sonata.admin, manager_type: orm, label: Blacklist }
        public: true

    admin.reciprocal.links:
        class: App\Admin\ReciprocalLinksAdmin
        arguments:
            - null
            - App\Entity\ReciprocalLinks
            - Sonata\AdminBundle\Controller\CRUDController
        tags:
            - { name: sonata.admin, manager_type: orm, label: Reciprocal Links }
        public: true

    admin.knowledgebase:
        class: App\Admin\KnowledgeBase\KnowledgeBaseAdmin
        arguments:
            - null
            - App\Entity\KnowledgeBase\KnowledgeBase
            - Sonata\AdminBundle\Controller\CRUDController
        tags:
            - { name: sonata.admin, manager_type: orm, label: Knowledge Base }
        public: true

    admin.knowledgebase.category:
        class: App\Admin\KnowledgeBase\KnowledgeBaseCategoryAdmin
        arguments:
            - null
            - App\Entity\KnowledgeBase\Category
            - Sonata\AdminBundle\Controller\CRUDController
        tags:
            - { name: sonata.admin, manager_type: orm, label: KB Categories }
        public: true

    admin.knowledgebase.subcategory:
        class: App\Admin\KnowledgeBase\KnowledgeBaseSubcategoryAdmin
        arguments:
            - null
            - App\Entity\KnowledgeBase\Subcategory
            - Sonata\AdminBundle\Controller\CRUDController
        tags:
            - { name: sonata.admin, manager_type: orm, label: KB Subcategories }
        public: true

    admin.main.documents:
        class: App\Admin\MainDocumentsAdmin
        arguments:
            - null
            - App\Entity\MainDocument
            - Sonata\AdminBundle\Controller\CRUDController
        tags:
            - { name: sonata.admin, manager_type: orm, label: Main Documents }
        public: true

    # Required by rabbitmq bundle
    market_consumer:
        class: 'App\Consumers\MarketConsumer'
        arguments:
            $logger: '@logger'
        tags:
            - { name: monolog.logger, channel: rabbitmq }

    payment_consumer:
        class: 'App\Consumers\PaymentConsumer'
        arguments:
            $logger: '@logger'
        tags:
            - { name: monolog.logger, channel: rabbitmq }

    deposit_consumer:
        class: 'App\Consumers\DepositConsumer'
        arguments:
            $logger: '@logger'
        tags:
            - { name: monolog.logger, channel: rabbitmq }

    deploy_consumer:
        class: 'App\Consumers\DeployConsumer'
        arguments:
            $logger: '@logger'
            $coinbaseApiTimeout: '%coinbase_api_timeout%'
        tags:
            - { name: monolog.logger, channel: rabbitmq }

    contract_update_consumer:
        class: 'App\Consumers\ContractUpdateConsumer'
        arguments:
            $logger: '@logger'
        tags:
            - { name: monolog.logger, channel: rabbitmq }

    wallet:
        class: 'App\Wallet\Wallet'
        arguments:
            $logger: '@logger'
        tags:
            - { name: monolog.logger, channel: payments }

    App\Exchange\Trade\Trader:
        arguments:
            $logger: '@logger'
            $referralFee: '%referral_fee%'
        tags:
            - { name: monolog.logger, channel: exchange }

    balancer:
        class: 'App\Exchange\Balance\BalanceHandler'
        public: true
        arguments:
            $logger: '@logger'
        tags:
            - { name: monolog.logger, channel: exchange }

    App\Manager\UserManager:
        arguments:
            - "@fos_user.util.password_updater"
            - "@fos_user.util.canonical_fields_updater"
            - "@doctrine.orm.entity_manager"
            - "%fos_user.model.user.class%"

    App\Security\HackerVoter:
        arguments:
            $isHackerAllowed: "%is_hacker_allowed%"

    app.mailer:
        class: App\Mailer\Mailer
        arguments:
            $mail: "%env(MAILER_USER)%"

    App\Mailer\MailerInterface: "@app.mailer"

    app.instant.mailer:
        class: App\Mailer\Mailer
        arguments:
            $mail: "%env(MAILER_USER)%"
            $mailer: '@swiftmailer.mailer.instant_mailer'

    App\Exchange\Balance\Factory\BalanceViewFactory:
        arguments:
            $tokenSubunit: "%token_precision%"

    App\Serializer\TradableNormalizer:
        arguments:
            $tokenSubunit: "%token_precision%"

    App\Controller\ResettingController:
        decorates: fos_user.resetting.controller
        public: true
        arguments:
            - '@event_dispatcher'
            - '@fos_user.resetting.form.factory'
            - '@fos_user.user_manager'
            - '@fos_user.util.token_generator'
            - '@fos_user.mailer'
            - '%fos_user.resetting.retry_ttl%'

    App\Controller\RegistrationController:
        decorates: fos_user.registration.controller
        public: true
        arguments:
            $eventDispatcher: '@event_dispatcher'
            $formFactory: '@fos_user.registration.form.factory'
            $userManager: '@fos_user.user_manager'
            $tokenStorage: '@security.token_storage'

    App\Exchange\Config\Config:
        arguments:
            $offset: "%env(VIABTC_OFFSET)%"
            $marketConsumerEnabled: "%market_consumer_enabled%"

    App\Controller\API\WebSocketController:
        arguments:
            $isAuth: "%env(VIABTC_FORCE_WS_AUTH)%"

    App\EventSubscriber\KernelSubscriber:
        arguments:
            $isAuth: "%env(VIABTC_FORCE_WS_AUTH)%"

    App\EventSubscriber\LoginInfoSubscriber:
        tags:
            - { name: kernel.event_subscriber }

    App\EventListener\BruteForceListener:
        arguments:
            $session: '@session'
            $secret: '%env(APP_SECRET)%'
        tags:
            - { name: kernel.event_listener, event: scheb_two_factor.authentication.attempt }
            - { name: kernel.event_listener, event: scheb_two_factor.authentication.failure }
            - { name: kernel.event_listener, event: scheb_two_factor.authentication.success }

    App\EventListener\RegistrationInitializedListener:
        tags:
            - { name: kernel.event_listener, event: fos_user.registration.initialize }

    App\EventListener\RegistrationCompletedListener:
        tags:
            - { name: kernel.event_listener, event: fos_user.registration.completed }

    kernel.listener.command_dispatch:
        class: App\EventListener\ConsoleCommandsListener
        tags:
            - { name: kernel.event_listener, event: console.terminate }

    FOS\UserBundle\Mailer\MailerInterface: '@fos_user.mailer'

    App\Logger\UserActionProcessor:
        autowire: true
        tags:
            - { name: monolog.processor, channel: user_action }

    monolog.formatter.user_action:
        class: Monolog\Formatter\LineFormatter
        arguments:
            - "%%datetime%%|%%level_name%%|%%extra.ip_address%%|%%extra.username%%|%%message%%|%%context%%\n"
            - "Y-m-d H:i:s"

    App\Logger\UserActionLogger:
        autowire: true
        tags:
            - { name: monolog.logger, channel: user_action }

    App\Logger\FrontEndProcessor:
        autowire: true
        tags:
            - { name: monolog.processor, channel: front_end }

    monolog.formatter.front_end:
        class: Monolog\Formatter\LineFormatter
        arguments:
            - "%%datetime%%|%%level_name%%|%%extra.ip_address%%|%%extra.username%%|%%extra.url%%|%%message%%|%%context%%\n"
            - "Y-m-d H:i:s"

    App\Logger\FrontEndLogger:
        autowire: true
        tags:
            - { name: monolog.logger, channel: front_end }

    App\EntityListener\ImageListener:
        tags:
            - { name: doctrine.orm.entity_listener, entity: App\Entity\Image, event: postLoad, lazy: true }
            - { name: doctrine.orm.entity_listener, entity: App\Entity\Image, event: postPersist, lazy: true }
            - { name: doctrine.orm.entity_listener, entity: App\Entity\Image, event: preRemove, lazy: true }

    logout_listner:
        class: App\EventListener\LogoutListener

    App\EventListener\ChangePasswordListener:
        tags:
            - { name: kernel.event_listener, event: fos_user.change_password.edit.completed }

    app.form.change_password:
        class: App\Form\ChangePasswordType
        tags:
            - { name: form.type, alias: app_user_change_password }

    app.form.resetting:
        class: App\Form\ResettingType
        tags:
            - { name: form.type, alias: app_user_resetting }

    App\EventSubscriber\SitemapSubscriber:
        arguments:
            - "@router"
        tags:
            - { name: "kernel.event_subscriber", priority: 100 }

    App\Controller\API\TokensController:
        arguments:
            $topHolders: "%top_holders%"
            $expirationTime: "%token_deletion_confirm_code_expiration_time%"

    two_factor.auth_require_handler:
        class: App\Security\TwoFactorRequireHandler
        public: true

    App\Communications\DisposableEmailCommunicator:
        arguments:
            $rpc: '@disposable_email.json_rpc'
            $fileNameIndex: "%name_of_files_for_disposable_domains_index%"
            $fileNameWildcard: "%name_of_files_for_disposable_domains_wildcard%"

    App\Utils\Converter\FriendlyUrlConverterInterface: '@App\Utils\Converter\FriendlyUrlConverter'

    # Media providers
    app.media.provider.document:
        class: App\Media\Provider\DocumentProvider
        tags:
            - { name: sonata.media.provider }
        arguments:
            - app.media.provider.document
            - '@sonata.media.generator.default'
            - '@sonata.media.thumbnail.format'
            - '%docs_path%'
            - '@App\Utils\Converter\FriendlyUrlConverterInterface'
            - ['pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx']
            - ['application/pdf', 'application/x-pdf', 'application/rtf', 'text/html', 'text/rtf', 'text/plain', 'application/excel', 'application/msword', 'application/vnd.ms-excel', 'application/vnd.ms-powerpoint', 'application/vnd.ms-powerpoint', 'application/vnd.oasis.opendocument.text', 'application/vnd.oasis.opendocument.graphics', 'application/vnd.oasis.opendocument.presentation', 'application/vnd.oasis.opendocument.spreadsheet', 'application/vnd.oasis.opendocument.chart', 'application/vnd.oasis.opendocument.formula', 'application/vnd.oasis.opendocument.database', 'application/vnd.oasis.opendocument.image', 'text/comma-separated-values', 'text/xml', 'application/xml', 'application/zip']
            - '@sonata.media.metadata.proxy'
        calls:
            - [ setTemplates, [ { helper_thumbnail: SonataMediaBundle:Provider:thumbnail.html.twig, helper_view: SonataMediaBundle:Provider:view_file.html.twig } ] ]

    App\Exchange\Market\MarketCapCalculator:
        arguments:
            $supplyLinks: { Webchain: '%mintme_supply%' }
            $tokenSupply: "%token_quantity%"
            $rpc: '@coinmarketcap.rest_rpc'
            $minimumVolumeForMarketcap: '%minimum_volume_for_marketcap%'

    app.profile.form:
        class: App\Form\ProfileType
        arguments:
            $showFullDataInProfile: '%show_full_data_in_profile%'

    App\EventSubscriber\TransactionSubscriber:
        arguments:
            $mailer: '@app.instant.mailer'

    App\Communications\CachedCryptoRatesFetcher:
        arguments:
            $rpc: '@coinmarketcap.rest_rpc'

    App\Communications\CryptoRatesFetcherInterface: '@App\Communications\CachedCryptoRatesFetcher'

    App\Manager\ImageManagerInterface: '@App\Manager\ImageManager'

    app.emailCanonicalizer:
        class: App\Canonicalizer\EmailCanonicalizer
        public: false

    App\Controller\HackerController:
        arguments:
            $quickRegistrationPassword: '%quick_registration_password%'

    App\Controller\API\UsersController:
         arguments:
            $clientManager: '@fos_oauth_server.client_manager.default'

    App\Security\ApiKeyAuthenticator:
         arguments:
            $oAuthStorage: '@fos_oauth_server.storage.default'

    App\EventSubscriber\AuthenticationListener:
        arguments:
            $firewallName: '%fos_user.firewall_name%'

    App\Utils\ServiceInfo\ServiceInfoBuilder:
        arguments:
            $depositWorkDir: '%env(DEPOSIT_WORKDIR)%'
            $withdrawWorkDir: '%env(WITHDRAW_WORKDIR)%'
            $contractWorkDir: '%env(CONTRACT_WORKDIR)%'

    App\Exchange\Config\AirdropConfig:
        arguments:
            $airdropParams: '%airdrop_params%'

    App\EventListener\NoCacheListener:
        tags:
            - { name: 'kernel.event_listener', event: 'kernel.response' }

    App\Security\PathRoles:
        arguments:
            $accessMap: '@security.access_map'

    App\Form\DataTransformer\MoneyTransformer:
        shared: false

    App\Repository\PendingWithdrawRepository:
        arguments:
            $expirationTime: '%withdraw_expiration_time%'

    App\Repository\PendingTokenWithdrawRepository:
        arguments:
            $expirationTime: '%withdraw_expiration_time%'

    App\Exchange\Config\DonationConfig:
        arguments:
            $donationParams: '%donation%'

    App\Logger\DonationLogger:
        autowire: true
        tags:
            - { name: monolog.logger, channel: donation }

    old_sound_rabbit_mq.consumer_command:
        class: App\Command\ConsumerCommand
